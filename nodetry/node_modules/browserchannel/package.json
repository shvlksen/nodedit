{
  "author": {
    "name": "Joseph Gentle",
    "email": "josephg@gmail.com",
    "url": "http://josephg.com/"
  },
  "name": "browserchannel",
  "description": "Google BrowserChannel server for NodeJS",
  "version": "2.0.0",
  "homepage": "https://github.com/josephg/node-browserchannel",
  "repository": {
    "type": "git",
    "url": "git://github.com/josephg/node-browserchannel.git"
  },
  "main": "index.js",
  "engine": "node >= 0.6.2",
  "scripts": {
    "test": "mocha",
    "prepublish": "make dist/server.js"
  },
  "dependencies": {
    "hat": "*",
    "connect": "~2",
    "request": "~2",
    "ascii-json": "~0.2"
  },
  "devDependencies": {
    "coffee-script": "~1.7",
    "timerstub": "*",
    "mocha": "*"
  },
  "readme": "A [BrowserChannel](http://closure-library.googlecode.com/svn/trunk/closure/goog/net/browserchannel.js) server.\n\n**tldr;** Its like socket.io, but it scales better and it has fewer bugs. It\njust does long polling. It also doesn't support websockets and doesn't support\ncross-domain requests out of the box.\n\nBrowserChannel is google's version of [socket.io](http://socket.io) from when they first put\nchat in gmail. Unlike socket.io, browserchannel guarantees:\n\n- Messages will arrive in order\n- Messages will never arrive on the server after a connection has closed\n- The mail will always get through on any browser that google talk works on, which is all of them.\n\n[![Build Status](https://secure.travis-ci.org/josephg/node-browserchannel.png)](http://travis-ci.org/josephg/node-browserchannel)\n\nnode-browserchannel:\n\n- Is compatible with the closure library's browserchannel implementation\n- Is super thoroughly tested\n- Works in IE5.5+, iOS, Safari, Chrome, Firefox, etc.\n- Works in any network environment (incl. behind buffering proxies)\n\n---\n\n# Use it\n\n    # npm install browserchannel\n\nBrowserchannel is implemented as connect middleware. Here's an echo server:\n\n```javascript\nvar browserChannel = require('browserchannel').server;\nvar connect = require('connect');\n\nvar server = connect(\n  connect.static(\"#{__dirname}/public\"),\n  browserChannel(function(session) {\n    console.log('New session: ' + session.id +\n      ' from ' + session.address +\n      ' with cookies ' + session.headers.cookie);\n\n    session.on('message', function(data) {\n      console.log(session.id + ' sent ' + JSON.stringify(data));\n      session.send(data);\n    });\n\n    session.on('close', function(reason) {\n      console.log(session.id + ' disconnected (' + reason + ')');\n    });\n      \n    // This tells the session to disconnect and don't reconnect\n    //session.stop();\n    \n    // This kills the session.\n    //session.close();\n  })\n);\n\nserver.listen(4444);\n\nconsole.log('Echo server listening on localhost:4444');\n```\n\nThe client emulates the [websocket API](http://dev.w3.org/html5/websockets/). Here is a simple client:\n\n```javascript\nvar BCSocket = require('browserchannel').BCSocket;\n\nvar socket = new BCSocket('http://localhost:4321/channel');\nsocket.onopen = function() {\n  socket.send({hi:'there'});\n};\nsocket.onmessage = function(message) {\n  console.log('got message', message);\n};\n\n// later...\nsocket.close()\n```\n\n... Or from a website:\n\n```html\n<html><head>\n<script src='/channel/bcsocket.js'></script>\n<script>\nsocket = new BCSocket('/channel');\nsocket.onopen = function() {\n  socket.send({hi:'there'});\n  socket.close();\n};\nsocket.onmessage = function(message) {\n  // ...\n};\n</script>\n```\n\nYou can also ask the client to automatically reconnect whenever its been disconnected. - Which is\nsuper useful.\n\n```javascript\nvar BCSocket = require('browserchannel').BCSocket;\nsocket = new BCSocket('http://localhost:4321/channel', reconnect:true);\nsocket.onopen = function() {\n  socket.send(\"I just connected!\");\n};\n```\n\n---\n\n# Differences from Websocket\n\n- You can send messages before the client has connected. This is recommended,\n  as any messages sent synchronously with the connection's creation will be\n  sent during the initial request. This removes an extra round-trip.\n- The send method can pass a callback which will be called when the message has\n  been received. **NOTE**: If the client closes, it is not guaranteed that this\n  method will ever be called.\n- Send uses google's JSON encoder. Its almost the same as the browser one, but\n  `{x:undefined}` turns in to `{x:null}` not `{}`.\n\n# API\n\n## Server API\n\nThe server is created as connect / express middleware. You create the middleware by calling\n\n```javascript\nvar browserChannel = require('browserchannel').server;\n\nvar middleware = browserChannel(options, function(session) {\n  ...\n});\n \n// Express\napp.use(middleware);\n```\n\nThe options object is optional. The following server options are supported:\n\n- **hostPrefixes**: Array of extra subdomain prefixes on which clients can\nconnect. Even modern browsers impose per-domain connection limits, which means\nthat when you have a few tabs open with browserchannel requests your\nconnections might stop woroking. Use subdomains to get around this limit.\nFor example, if you're listening for connections on *example.com*, you can\nspecify `hostPrefixes: ['a', 'b', 'c']` to make clients send requests to\n*a.example.com*, *b.example.com* and *c.example.com*.\n- **base**: The base URL on which to listen for connections. (Defaults to\n`\"/channel\"`). Think of the base URL as a URL passed into `app.use(url,\nmiddleware)`.\n- **headers**: Map of additional response headers to send with requests.\n- **cors**: Set `Access-Control-Allow-Origin` header. This allows you to\nspecify a domain which is allowed to access the browserchannel server. See\n[mozilla documentation](https://developer.mozilla.org/en/http_access_control)\nfor more information. You can set this to `'*'` to allow your server to be\naccessed from clients on any domain, but this may open up security\nvulnerabilities in your application as malicious sites could get users to\nconnect to your server and send arbitrary messages.\n- **corsAllowCredentials**: (Default *false*) Sets the\n`Access-Control-Allow-Credentials` header in responses. This allows\ncross-domain requests to send their cookies. You cannot do this if you set\n`cors:'*'`. To make this work you must also add the `{crossDomainXhr:true}`\noption in the client. See [mozilla\ndocumentation](https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS#Requests_with_credentials)\nfor more information. Setting this is equivalent to setting\n`headers:{'Access-Control-Allow-Credentials':true}`.\n- **keepAliveInterval**: (Default *20000 = 20 seconds*). Keepalives\nare sent periodically to make sure http connections aren't closed by eager\nclients. The standard timeout is 30 seconds, so sending keepalives every 20\nseconds keeps the connection healthy. Time is specified in milliseconds\n- **sessionTimeoutInterval**: (Default *30 seconds*). Amount of time we wait\nbefore evicting a client connection. Setting this lower will make the server\nnotice disconnected clients more quickly. Setting it higher will make\nconnections more resiliant to temporary network disconnection. Time specified\nin milliseconds.\n\nNote that by default, CORS support is disabled. This follows the lead of\nbrowsers. Be very careful when enabling CORS & CORS credentials. You should\nexplicitly whitelist sites from which your users will connect.\n\nSetting hostPrefixes in production is important - if you don't enable host\nprefixes, browserchannel will stop working for a user once they have more than\na couple of tabs open. Set DNS rules to make the extra prefixes all point to\nthe same server / cluster.\n\n### Client sessions\n\nWhenever a client connects, your middleware's method is called with the new\nsession. The session is a nodejs event emitter with the following properties:\n\n- **id**: An ID that is unique to the session.\n- **address**: A string containing the IP address of the connecting client.\n- **query**: An object containing the parsed HTTP query of the initial\nconnection. Any custom query parameters will be exposed on this object.\n- **state**: The current state of the connection. One of `'init'`, `'ok'` and\n`'closed'`. When the state is changed, the client will emit a *state changed*\nevent with the old state and new state as event parameters.\n- **appVersion**: The client's reported application version, or null. You can\nuse this to reject clients which are connecting from old versions of your\nclient.\n\n#### Sending messages\n\nYou can **send messages** to the client using `client.send(data, callback)`. The\ndata parameter will be automatically JSON.stringified. If specified, the\ncallback will be called once the message has been acknowledged by the client.\n\n> Note: If you wrap a browserchannel connection in a nodejs stream, don't use\n> the callback. Node streams will only allow one message to be in flight at a\n> time. As a result, you'll get much lower message throughput than you\n> otherwise should.\n\n\n#### Receiving messages\n\nReceive messages through the `message` event.\n\n```javascript\nsession.on('message', function(data) {\n  // ...\n});\n```\n\nThe message will be a javascript object if you sent a javascript object using\nthe client API.\n\n#### Stopping and closing connections\n\nBrowserchannel has two different methods for closing client connections, *session.stop*\nand *session.close*. Both methods disconnect the client. The difference is that\nstop also tells the client not to reconnect. You should use close when a\nrecoverable server error occurs, and stop when the client is in an\nunrecoverable invalid state.\n\nFor example, if an exception occurs handling a message from a client, you may\nwant to call close() to force the client to reconnect. On the other hand, if a\nbrowser is trying to connect using an old version of your app, you should call\nstop(). In the browser, you can handle the stop message with a notice to\nrefresh the browser tab.\n\n#### Events\n\nThe client is an event emitter. It fires the following events:\n\n- **close (reason)**: The client connection was closed. This will happen for a variety\nof reasons (timeouts, explicit disconnection from the client, disconnection\nfrom the server, etc). Once a client has closed, it is gone forever. If the\nclient reconnects, it will do so by establishing a new session.\n- **message (data)**: The server received a message from the client. The data\nobject will be a javascript object.\n- **state changed (oldstate, newstate)**: The client's state changed. Clients\nstart in the 'init' state. They move to the 'ok' state when the session is\nestablished then go to the 'closed' state. If a client reconnects, they will\ncreate an entirely new session. init -> ok -> closed are the only three valid\nstate transitions.\n\n\n## Client API\n\nFor the most part, the client API is identical to websockets.\n\n```javascript\nvar socket = new BCSocket(hostname, opts);\n```\n\nopts is optional, and if it exists it should be an object which can contain the\nfollowing properties:\n\n- **appVersion**: Your application's protocol version. This is passed to the server-side\n  browserchannel code, in through your session handler as `session.appVersion`\n- **prev**: The previous BCSocket object, if one exists. When the socket is established,\n  the previous bcsocket session will be disconnected as we reconnect.\n- **reconnect**: Tell the socket to automatically reconnect when its been disconnected.\n- **failFast**: Make the socket report errors immediately, rather than trying a\n  few times first.\n- **crossDomainXhr**: Set to true to enable the cross-origin credential\n  flags in XHR requests. The server must send the\n  Access-Control-Allow-Credentials header and can't use wildcard access\n  control hostnames. See:\n    http://www.html5rocks.com/en/tutorials/cors/#toc-withcredentials\n- **affinity**: Set to null to disable session affinity token passing.\n- **affinityParam**: Session affinity tokens are sent in the query string as\n  the GET parameter `a` by default. Your application may override the\n  variable name if there is a query string conflict.\n\nThere are a couple of differences from the websocket API:\n\n- You can (and are encouraged to) call `send()` using JSON objects instead of\nmere strings. JSON serialization is handled by the library, and works in all\nbrowsers.\n- You can send messages immediately before the session is established. This\nremoves a roundtrip before client messages can arrive on the server.\n- Browserchannel sessions have reconnect support. You should register\n`socket.onconnecting = function() {...}` to send any messages which need to be\nsent as the session is established. This will be called both when the socket is\nfirst established *and* when the session reconnects.\n\n\n---\n\n# Caveats\n\n- It doesn't do RPC.\n- Currently there's no websocket support. So, its higher bandwidth on modern\nbrowsers. On iOS you'll sometimes see a perpetual loading spinner in the top\nblack bar.\n\n---\n\n# How to rebuild the client\n\nThe client uses google's [closure library](https://developers.google.com/closure/library/)\n& [compiler](https://developers.google.com/closure/compiler/). There's a couple small bugs that google\nstill hasn't fixed in their library (and probably never will), so I have a patch file kicking around.\n\nRebuilding the client library is annoying, so I keep an up to date compiled copy in `dist/`.\n\n1. Download the closure library as a sibling of this repository\n\n    ```\n    cd ..\n    git clone https://code.google.com/p/closure-library/\n    git checkout -q df47692b1bacd494548a3b00b150d9f6a428d58a\n    cd closure-library\n    ```\n\n2. Download the closure compiler\n\n    ```\n    curl http://dl.google.com/closure-compiler/compiler-latest.tar.gz > compiler-latest.tar.gz\n    tar -xvf compiler-latest.tar.gz\n    mv compiler-latest/compiler.jar .\n    ```\n\n3. Patch the library\n\n    ```\n    cd closure/\n    patch -p0 < ../../node-browserchannel/closure-*.patch\n    ```\n\n4. Build\n\n    ```\n    cd ../../node-browserchannel\n    make\n    ```\n\n## Caveats\n\n### Java ~1.7 is a hard requirement.\nBuilding this project with Java ~1.6 will fail, and may even fail silently.\n\n### Known issue with latest closure-library.\nUntil [the bug][34] introduced in `closure-library#83c6a0b9`\nis resolved upstream, use `closure-library#df47692`\n\n[34]: https://github.com/josephg/node-browserchannel/issues/34\n\n\n---\n\n### License\n\nLicensed under the standard MIT license:\n\nCopyright 2011 Joseph Gentle.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/josephg/node-browserchannel/issues"
  },
  "_id": "browserchannel@2.0.0",
  "_from": "browserchannel@"
}
