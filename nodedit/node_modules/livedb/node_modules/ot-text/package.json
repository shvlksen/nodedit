{
  "name": "ot-text",
  "version": "1.0.1",
  "description": "OT type for plaintext",
  "main": "lib/index.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {},
  "devDependencies": {
    "ot-fuzzer": "~1.0.0",
    "mocha": "^1.20.1",
    "coffee-script": "^1.7.1"
  },
  "scripts": {
    "test": "mocha test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ottypes/text.git"
  },
  "keywords": [
    "ot",
    "text",
    "sharejs"
  ],
  "author": {
    "name": "Joseph Gentle",
    "email": "me@josephg.com"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/ottypes/text/issues"
  },
  "homepage": "https://github.com/ottypes/text",
  "readme": "# The Plaintext OT Type\n\nThis OT type can be used to edit plaintext documents, like sourcecode or\nmarkdown.\n\nThis project's [history is here](https://github.com/share/ShareJS/blob/0.6/src/types/text2.coffee).\n\nFor documentation on the spec this type implements, see [ottypes/docs](/ottypes/docs).\n\n## Spec\n\nThe plaintext OT type thinks of the document as a giant string, and edits index\ninto the string directly. This is different from most text editors, which break\nup a document into an array of lines. For small documents on modern computers,\nthe conversion isn't particularly expensive. However, if you have giant\ndocuments you should be using a rope library like\n[jumprope](https://github.com/josephg/jumprope) or\n[librope](https://github.com/josephg/librope).\n\nEach operation describes a traversal over the document. The traveral can edit\nthe document as it goes.\n\nFor example, given the document:\n\n```\n\"ABCDEFG\"\n```\n\nYou could apply the operation\n\n```\n[1, ' hi ', 2, {d:3}]\n```\n\nThis operation will skip the first character, insert ' hi ', skip 2 more\ncharacters then delete the next 3 characters. The result would be:\n\n```\n\"A hi BCG\"\n```\n\n### Operations\n\nOperations are lists of components, which move along the document. Each\ncomponent is one of\n\n- **Number N**: Skip forward *N* characters in the document\n- **\"str\"**: Insert *\"str\"* at the current position in the document\n- **{d:N}**: Delete *N* characters at the current position in the document\n\nThe operation does not have to skip the last characters in the document.\n\n### Selections\n\nThe text type also has methods for manipulating selections.\n\nSelection ranges are either a single number (the cursor position) or a pair of\n[anchor, focus] numbers (aka [start, end]) of the selection range. Be aware\nthat end can be before start.\n\n---\n\n# Commentary\n\nThis is the 3rd iteration of ShareJS's plaintext type. It hasn't been changed\nin a long time now.\n\nThe first iteration was similar, except it is invertable. Invertability is\nnice, but I want to eventually build an arbitrary P2P OT system, and in a p2p\nsetting invertibillity becomes impractical to achieve. I don't want systems to\ndepend on it.\n\nThe second iteration made each component specify a location and an edit there.\nOperations were lists of these edits. Because the components were not sorted,\nif you transform two big operations by one another it requires M\\*N\ntime to transform. The components could be sorted to fix this, but if you're\ngoing to do that you may as well just make them sorted by design - which is\nwhat the current text implementation does. I thought the individual edits style\nwas better because I expected it to be simpler, but when I implemented it I\nfound the implementation of each method was almost identical in size.\n\nThere is also a [C implementation of this type](https://github.com/share/libot/blob/master/text.h) which is\n[insanely](https://dl.dropboxusercontent.com/u/2494815/ot%20apply%20bench%201.png)\n[fast](https://dl.dropboxusercontent.com/u/2494815/ot%20apply%20bench%202.png).\nThe implementations are almost the same, except javascript counts characters\nusing 16 bit words and the C implementation counts characters using UTF8\ncodepoints. This means that if you have any characters in the astral plane in\nyour document, edit & cursor positions won't be aligned. See [here for more\ninformation](http://josephg.com/blog/string-length-lies).\n\n---\n\n# License\n\nAll code contributed to this repository is licensed under the standard MIT license:\n\nCopyright 2011 ottypes library contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following condition:\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "ot-text@1.0.1",
  "_from": "ot-text@^1.0.0"
}
